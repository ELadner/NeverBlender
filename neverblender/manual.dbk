<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
                      "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">

<book lang="en">

  <!-- ================================================================ -->
  <bookinfo>

    <title>NeverBlender Manual</title>

    <abstract>
      <para>This document describes the usage and philosophy of
	NeverBlender package, a package intended to make Blender
	modeller and the
	<trademark>Neverwinter Nights</trademark> computer game
	cooperate.</para>
    </abstract>

    <author>
      <surname>Lankinen</surname><firstname>Urpo</firstname>
      <authorblurb>
	<para>E-mail:
	  <ulink url="mailto:wwwwolf@iki.fi">wwwwolf@iki.fi</ulink>
	</para>
	<para>WWW:
	  <ulink url="http://www.iki.fi/">http://www.iki.fi/wwwwolf/</ulink>
	</para>
      </authorblurb>
    </author>

    <pubdate>$Date$</pubdate>
    <releaseinfo>$Revision$</releaseinfo>

    <copyright><year>2003</year><holder>Urpo Lankinen</holder></copyright>

    <legalnotice>

      <para>NeverBlender package is distributed under an extremely
	free license.</para>

      <para>Basically, the package is © 2003 The NeverBlender
	Contributors. It is copyrighted - not public domain.</para>

      <para>You are allowed to distribute, modify and use the source
	code / scripts in any way you want. However, the copyright
	notices must remain as they are. You may add notes describing
	which parts you have changed to copies you distribute, but this
	copyright notice (and the COPYING and AUTHORS files) must
	accompany the distribution, and all copyright notices on the
	files must remain as they are.
      </para>

      <para>
	There is no warranty whatsoever, expressed or implied. You are using
	this software at your own risk!
      </para>

      <para>This documentation is supplied under the same terms,
	except that electronic or printed versions of the
	documentation need not to be accompanied by the COPYING and
	AUTHORS files, in case the file is distributed separate from
	the whole distribution. This whole copyright notice must be
	present, however.
      </para>


      <para>
	<trademark>Neverwinter Nights</trademark>
	© 2002 Bioware and Infogrames (Atari). All rights reserved.
	<trademark>Neverwinter Nights</trademark>, 
	<trademark class="registered">Dungeons &amp; Dragons</trademark> and
	<trademark class="registered">Forgotten Realms</trademark>
	are trademarks of Wizards of the Coast.
      </para>
    </legalnotice>

  </bookinfo>

  <!-- ================================================================ -->
  <chapter>
    <title>Background</title>

    <sect1>
      <title>What is NeverBlender?</title>

      <para>NeverBlender is a project to build some sort of bridge
	between Blender Foundation's
	<ulink url="http://www.blender.org/">Blender</ulink>
	3D modelling application and Bioware's computer game
	<ulink url="http://nwn.bioware.com/"><trademark>Neverwinter
	    Nights</trademark></ulink>.</para>

      <para>At the moment, NeverBlender is able to export models from
	Blender in Bioware .mdl format. There is also an importer
	script.</para>
    </sect1>

    <sect1>
      <title>What NeverBlender can do?</title>

      <sect2>
	<title>General features</title>

	<itemizedlist>
	  <listitem><para>
	      The general strategy is to have a single script file
	      with a small library of reusable stuff. Quite simply,
	      Open Script and Run It, that's it.
	    </para>
	  </listitem>
	  <listitem><para>
	      NWN features with direct equivalents in Blender are
	      directly supported (or planned). Examples include UV
	      editor use for texture coordinates and Blender's
	      animation support for animations (at the moment, only
	      attempted in importer).
	    </para>
	  </listitem>
	  <listitem><para>
	      NWN-specific data can be conveniently stored alongside
	      your <filename>.blend</filename> since the data is stored
	      in a normal <type>Text</type>.
	    </para>
	  </listitem>
	</itemizedlist>

      </sect2>

      <sect2>
	<title>Exporter</title>

	<itemizedlist>
	  <listitem><para>
	      Exports to ASCII MDL files.
	    </para></listitem>
	  <listitem><para>
	      Many (but not that many =/ ) NWN-specific properties, such
	      as tile fade, are supported.
	    </para>
	  </listitem>
	  <listitem><para>
	      Capable of exporting <type>Mesh</type>es, parented to a
	      single <type>Empty</type>.
	    </para>
	  </listitem>
	  <listitem><para>
	      Supports texturing of the objects. You can normally
	      texture the objects using Blender's own UV map editor!
	    </para>
	  </listitem>
	  <listitem><para>
	      Supports flat-shading and smooth shading of individual
	      mesh faces.
	    </para>
	  </listitem>
	</itemizedlist>

      </sect2>

      <sect2>
	<title>Importer</title>

	<para>Importer's feature list is yet to be written in
	  full.</para>

	<itemizedlist>
	  <listitem><para>
	      Imports ASCII MDL files.
	    </para></listitem>
	  <listitem><para>
	      Supports animations to some extent.
	    </para></listitem>

	</itemizedlist>

      </sect2>

    </sect1>

    <sect1>
      <title>The Usual Warning</title>

      <para>It is quirky. You shouldn't use the scripts to do anything
	serious unless you're at least a little bit familiar with
	Blender, the NWN .mdl ASCII format, and preferrably also Python
	and especially Blender Python API.</para>

      <para>But don't worry, I'm moderately skilled with Blender,
	don't know too much about the format, and Python is all Greek to
	me, yet I'm the author and <emphasis>got it
	  working!</emphasis> =)
      </para>


    </sect1>

    <sect1>
      <title>Why NeverBlender?</title>

      <para>Neverwinter Nights is a game that I waited with a great
	anticipation as soon as I heard what kind of things were
	possible in it. It seemed like that if even fraction of the
	hype was true, that would be the game I had waited
	forever. Most of the computer RPGs I had played were either
	infinite in length but quite weak plotwise or on hackability
	(Nethack, for example), or with good and enjoyable plot but
	limited in length and content and with even less hackability
	(Baldur's Gate, for example). Now, NWN promised more than
	this: A plot-driven CRPG with advanced network play (with
	dungeon master support, even), and above all, a toolset that
	allows us to do stuff and render all "expansion sets"
	obsolte. (Weird, isn't it, that I'm really waiting for Shadows
	of Undrentide? =)</para>

      <para>Now, as NWN was released, it was obvious to me that the
	toolset wasn't the tool to get the wildest dreams true. Sure
	it was the tool to create adventures, but the amount of
	building blocks was limited. And it really felt like building
	blocks. So few different blocks! I did appreciate the concept,
	but it felt like there still were limits.<footnote>
	  <para>My first intent was to "port" a PnP adventure from an
	    old issue of a Finnish RPG magazine <citetitle>Sininen
	      Lohik‰‰rme</citetitle>, however, the supplied set of
	    content was far too narrow. For example, in order to port
	    99% of adventures published in Finnish RPG mags, I would
	    have needed the items that appeared in all of the
	    adventuresf or some reason, such as "an erotic painting on
	    wall" and "a beautiful young woman who is chained on
	    altar"... though I don't know why they were included in
	    the adventures in first place.
	  </para>
	</footnote>
      </para>

      <para>Now, later I found <personname>
	<firstname>Eligio</firstname><surname>Sacateca</surname>
	</personname>'s excellent <citetitle>Custom Content
	  Guide</citetitle>, and realized that I can make more of the
	building blocks on myself! This book was really an eye-opener
	and definitely gave me more interest in creating more content.
      </para>

      <para>Now, there is just one problem. NWN's official custom
	content tools rely on 3DS MAX, which is, from the point of view
	of a starving student, an Awfully Expensive Program. The other
	option, less official, is gmax. There are other modelling tools
	too.</para>

      <para>Yet, none of these options are like the One True
	Modeller. I personally found Blender to be the most smoothly used
	program I've ever used - creating meshes with it is very very
	easy. Indeed, I'm one of those 3D modellers who learned that
	and then decided not to use anything else because Blender
	actually rules. Too bad I'm not a full-time 3D freak,
	otherwise I'd use Blender even more than I do now...
      </para>

      <para>I first thought writing a script for Blender would be
	difficult. Yet, after I got ahead, I learned a few things:
	Firstly, the rumors of difficulty of getting anything done in
	Blender's Python api are greatly exaggerated (the
	documentation stinks, that's all), and Python is not as nice
	as the Python fanatics would like us Perl people to think. Not
	as ugly syntax, but fundamentally it's the same ugly stuff.</para>

      <para>I'm surprised that NeverBlender has become basically
	working and sort of releaseable in such a short time, and I'm
	even more surprised that it actually works more conveniently
	than the competition. I recently tried modelling something
	again in gmax and found it rather annoying to copy things from
	the listener window - even more so when gmax was misbehaving
	if I tried to copy more than 10 lines at a time... Blender has
	a "listener window", yeah, but it also has access to Python's
	file I/O functions. =)</para>

    </sect1>

  </chapter>
  <chapter>
    <title>Getting It To Run</title>

    <sect1>
      <title>Obtaining NeverBlender</title>

      <para>There are two distinct branches of NeverBlender code. The
	released versions are guaranteed to do something at the time
	of the release, but are often lagging behind in
	development. Then, there's the development code, found in the
	Blender Projects Site CVS.</para>

      <para>The easiest way to get NeverBlender is to go to
	<ulink url="http://www.iki.fi/wwwwolf/games/nwn/gametools/neverblender/">NeverBlender's home page</ulink>,
	or the 
	<ulink url="http://projects.blender.org/projects/neverblender/">NeverBlender Project Page</ulink>.
	As of writing, latest release is Prerelease 2, which is not
	exactly a recent version. It is available through NeverBlender
	website. All further releases will be available in
	NeverBlender Project Page.
      </para>

      <sect2>
	<title>Obtaining the code from CVS</title>

	<para>
	  To get the most recent CVS version, you need a CVS client
	  program. Windows version can be got from
	  <ulink url="http://www.cvshome.org/dev/codewindow.html">CVS
	    home page</ulink>, Linux versions are
	  usually pre-packaged with the distribution.
	  And are there MacOSX users who can live without
	  <ulink url="http://fink.sourceforge.net/">Fink</ulink>,
	  which among other things, by the way, doth package CVS?
	  (heck, even my sister needs Lincity...)
	</para>

	<para>The following illustrates how to get the code from CVS:</para>

<screen>
<prompt>$</prompt> <userinput>cvs -d:pserver:anonymous@cvs.blender.org:/cvsroot/neverblender login</userinput>
Logging in to :pserver:anonymous@cvs.blender.org:2401/cvsroot/neverblender
CVS password: <userinput><replaceable>(Just press enter)</replaceable></userinput>
<prompt>$</prompt> <userinput>cvs -z3 -d:pserver:anonymous@cvs.blender.org:/cvsroot/neverblender co neverblender</userinput>
cvs server: Updating neverblender
U neverblender/AUTHORS
U neverblender/COPYING
U neverblender/ChangeLog
...
</screen>

	<para>After this, the code should be in the
	  <filename>neverblender</filename> directory.</para>

      </sect2>

    </sect1>


    <sect1>
      <title>Requirements and Installation</title>

      <para>My original intent was to make every NeverBlender script a
	wholly self-contained package. However, this was not
	possible - the code became rather ugly even in my standards. I
	decided it was easy to split the code in separate modules and
	utilize an object-oriented approach.</para>

      <para>Basically, NeverBlender requires Blender 2.28 or later
	(or any release with the New and Improved Python API). It
	may work on earlier Python APIs, but I wouldn't guarantee
	that. At the moment, I'm developing on Blender 2.32.</para>

      <para>I develop NeverBlender on Windows version of Blender.
	You do, however, need Python 2.2.3 as well (Windows Python
	v2.3 doesn't want to coexist with Blender); My scripts use a
	couple of things not provided with the abridged Windows
	Blender library, and the importer cooks the shit out of it.
	Since most of the useful custom content tools seem to
	be working only in Windows, I absolutely insist that the code
	will work in Windows version of Blender, though. You don't
	need any weird UNIX-dependant things.</para>

      <sect2>
	<title>Library files</title>

	<para>The installation is quite simple: You need to copy the
	  <filename>lib</filename> directory, or its contents, wherever
	  Blender sees it. The directory is named
	  <filename>lib</filename> because Blender in Windows will also
	  look in <filename>.\lib\</filename> (that is, under directory
	  <filename>lib</filename> under the current working directory).
	  Archeological reasons, you know.
	</para>

	<sect3>
	  <title>A <emphasis>way</emphasis> too easy installation method</title>
	  <warning>
	    <para>Sorry, this doesn't work. I got carried away. Looks
	      like it works just fine in regular Python but not inside
	      Blender. Goddamn it.</para>
	    <para>Well, I <emphasis>told</emphasis> you it was
	      too easy? =)</para>
	  </warning>

	  <para>This installation method is easiest because it doesn't
	    need any weird environment variables or messing with
	    system directories. This method works in Debian
	    GNU/Linux. It may work on other Linux distributions. Some
	    other dists may have similar method available. You may
	    refer to the <filename>site.py</filename> file (in Debian,
	    <filename>/etc/python2.3/site.py</filename>) and see if
	    something similar works for your platform.
	  </para>

	  <para>First, you need to put all Neverblender files to, say,
	    <filename>/usr/local/lib/neverblender</filename>.</para>

	  <para>After this, you'll just need to do this command as root:</para>

<screen>
<prompt>$</prompt> <userinput>echo "/usr/local/lib/neverblender/lib" &gt; /usr/local/lib/python2.3/site-packages/NeverBlender.pth</userinput>
</screen>

	  <para>...and the libraries should be installed!</para>

	</sect3>

	<sect3>
	  <title>Fixed installation directory</title>
	  
	  <para>This feature is only partially supported the way it
	    should, and it's only 0% elegant.</para>

	  <para>You can stick NeverBlender in
	    <filename>/usr/local/lib/neverblender</filename> or
	    symlink it there. It should work.</para>

	  <para><emphasis>Should.</emphasis></para>

	</sect3>


	<sect3>
	  <title>An easy way to run NeverBlender</title>

	  <para>
	    Easy way is to run Blender so that the NeverBlender scripts
	    are in the current directory and library files are under it
	    in <filename>lib</filename>.
	    In all cases, Blender's Python interpreter will,
	    by default, look for <filename>lib</filename> directory in
	    current working directory.
	  </para>

	  <para>
	    In Windows version, Blender's
	    work folder (in the shortcut) can be set to NeverBlender
	    directory (you can create a new shortcut that has different
	    working directory if you wish); In Linux, blender can be
	    run on command line in NeverBlender directory.
	  </para>

	  <para>
	    This is probably the most easiest way to run Blender, but
	    it has certain disadvantages - most notably you need to
	    hunt around for your usual work folders.
	  </para>

	</sect3>

	<sect3>
	  <title>A small guide to <envar>PYTHONPATH</envar></title>

	  <para>
	    A more flexible and far more comfortable way is to add the
	    <filename>lib</filename> to your
	    <envar>PYTHONPATH</envar>. This is definitely recommended.
	    <envar>PYTHONPATH</envar> tells what directories to look
	    Python libraries from.
	  </para>

	  <para>
	    As for finding where Blender/Python looks libraries from,
	    you can use Blender's own built-in script for this
	    task. You should start up Blender, go to Script Window,
	    then choose 
	    <menuchoice>
	      <guimenu>Scripts</guimenu>
	      <guisubmenu>System</guisubmenu>
	      <guimenuitem>System information...</guimenuitem>
	    </menuchoice>,
	    then switch to Text editor and see the
	    <classname>Text</classname> called
	    <filename>system-info.txt</filename>. Scroll up and you
	    should be able to see which directories are in your
	    <envar>PYTHONPATH</envar>.
	  </para>

	  <para>Now, Python has had a rather weird handling of 
	    <envar>PYTHONPATH</envar> over time. Some versions of
	    Python seem to want that if you specify your own path, you
	    also have to specify the previous contents there or they
	    won't be found. The version I have right now at hand
	    (2.3.5) seems to think that <envar>PYTHONPATH</envar> is,
	    logically enough, <emphasis>added</emphasis> to "system" path, so
	    you don't need to specify special contents.</para>

	  <sect4>
	    <title>General principles</title>

	    <para>
	      In Windows98SE, this kind of spell is needed to be put in
	      <filename>c:\autoexec.bat</filename>:

<informalexample>
<programlisting>
SET PYTHONPATH=c:\Python;...;d:\NeverBlender\lib
</programlisting>
</informalexample>

	      where NeverBlender is in <filename>d:\NeverBlender</filename>.
	      (I don't know how to set the variable in Win2K or WinXP, probably
	      something similar but entirely different...)
	    </para>

	    <para>
	      In Linux, when using <command>bash</command> shell, following works in
	      <filename>~/.bash_profile</filename>:

<informalexample>
<programlisting>
export PYTHONPATH=/usr/lib/python2.3:...:/opt/neverblender/lib
</programlisting>
</informalexample>

	      where NeverBlender is in <filename>/opt/neverblender</filename>.
	    </para>

	  </sect4>

	  <sect4>
	    <title>What to try</title>

	    <para>In general, you probably want to try first setting
	      the <envar>PYTHONPATH</envar> to just the directory
	      where you installed it to, for example,

<informalexample>
<programlisting>
SET PYTHONPATH=d:\NeverBlender\lib
</programlisting>
</informalexample>

	      in Windows or

<informalexample>
<programlisting>
export PYTHONPATH=/opt/neverblender/lib
</programlisting>
</informalexample>

	      in Linux.
	    </para>

	    <para>Then start up Blender and do the path-show script trick
	      mentioned earlier. You should see a lot of Python system
	      directories and your directory added to the whole
	      lot. If you <emphasis>only</emphasis> see your added
	      directory, remove the setting, add all paths that you
	      see when you run the system info script, and on top of
	      that your own directory.</para>

	  </sect4>

	</sect3>

      </sect2>



      <sect2>
	<title>The program files</title>


	<para>The files <filename>nwnmdlexport.py</filename> and
	  <filename>nwnmdlimport.py</filename> can be just about
	  anywhere you choose. However, you should put them, or at least
	  a symbolic link to them, to
	  <filename>~/.blender/scripts/</filename> directory (or wherever
	  you keep your scripts - check your Blender settings). This
	  will make the scripts appear in the Blender menus.</para>

      </sect2>

    </sect1>
    

  </chapter>

  <!-- ================================================================ -->
  <chapter>
    <title>Modelling in NeverBlender</title>

    <warning>
      <para>It is <emphasis>highly recommended</emphasis> to
	<emphasis>not</emphasis> save your work after you have used
	NeverBlender.</para>
      <para>In other words, the following work cycle is highly
	recommended: first save your work, then run
	the exporter; if the result is unsatisfactory, use
	<menuchoice>
	  <shortcut>
	    <keycombo><keycap>Ctrl</keycap><keysym>O</keysym></keycombo>
	  </shortcut>
	  <guimenu>File</guimenu>
	  <guimenuitem>Reopen Last</guimenuitem>
	</menuchoice>
	to open the last saved version, work from there, again
	save, and so on.
      </para>

      <para>The reason is that while NeverBlender tries to avoid
	touching your data, it somehow <emphasis>might</emphasis>,
	and there are (as noted elsewhere) no warranties
	on software these days. And think about it - this is just
	beta software right now, anyway! Who knows what it does to
	your data...
      </para>

      <para>In fact, I guess the best possible way to use the exporter
	is to quit right after running the exporter, and if there are
	any needs to edit the thing later, restart Blender and use
	the Reopen Last trick mentioned earlier (or use file name on
	command line, or start Blender up by clicking file, or
	something).</para>
    </warning>


    <para>MDL format itself is somewhat limited compared to
      the full feature set of Blender - which shouldn't be a
      surprise. You should use NeverBlender like all other low-poly
      things: Patience, care, and not getting too angry when the
      stupid game engine messes everything up while the exporter maker
      and game engine vendor point at each other. Patience is the
      most valuable thing a modder can have. The second most important
      thing is to say no to all deadlines, sticking to the "when it's done"
      schedule. And third... I don't know, I haven't been using this thing
      for that long yet.
    </para>

    <para>There used to be time when this manual had separate sections for
      actual usage instructions and "bugs and limitations". Not so anymore,
      either because things are improving, or because there never will be
      a fix due to limitations of the system.
    </para>

    <sect1>
      <title>Basics of Modelling in Neverblender</title>

      <para>Modelling in NeverBlender could not be easier, but there
        are some things that must be considered. Basically,
        to create whatever you are creating, you create one or more
        <type>Mesh</type>es.</para>

      <para>It should be noted tha only <type>Mesh</type>es are
        supported, and the <type>Mesh</type>es should consist of triangle and
        quad faces. Anything bigger than that must be broken down
        manually.  It doesn't really matter what the meshes are named,
        as long as their names do not have spaces (I think?) - also
        note that only the names of the Objects are used, not the
        names of the <type>Mesh</type>es
        (in other words, in EditButtons, the
        relevant part is OB:Something, not ME:Something).</para>

      <para>It should be also noted that the smoothing and
        flat-shading of objects should work normally! You can set
        faces smooth or flat using the EditButtons in the Edit Mode,
        as usual.</para>

      <para>Once you have made your <type>Mesh</type>es, you need to
        create an <type>Empty</type>. You should then give this
        <type>Empty</type> the name you want to
        give to this object in NWN - be it "merewidget" or
        "wplss_t_011". As mentioned, the <citetitle>Custom Content
          Guide</citetitle> is a wonderful work when considering the
        name of an object.</para>

      <para>Next, you need to make this <type>Empty</type> of yours
        the parent of every <type>Mesh</type> you want to include in
        the object. Simply select 
        your <type>Mesh</type> with
        <mousebutton>right</mousebutton> mouse button,
        Then select the <type>Empty</type> with
        <keycombo>
          <keycap>Shift</keycap><mousebutton>right</mousebutton>
        </keycombo>, and hit
        <keycombo><keycap>Ctrl</keycap><keysym>P</keysym></keycombo>.
        Repeat for each item.
      </para>

      <para>Now, you should have an <type>Empty</type> that has
        <type>Mesh</type> objects as its children.</para>

      <sect2>
        <title>The Object Tree</title>

        <para>The object three can, unlike in the earlier versions of
          NeverBlender, actually have depth. Objects can be parented to
          each other.</para>

        <para><type>Armature</type>s aren't exported along with
          <type>Mesh</type> Objects. However, if you parent your
          <type>Mesh</type>es to an <type>Armature</type>, the
          <type>Mesh</type>es are parented
          to <type>Armature</type>'s parent.</para>
      </sect2>

      <sect2>
	<title>Objects must be uniquely named</title>

	<para>The script does not, in any way, check that the items
	  are in any way conflictless and the tree builder
	  <emphasis>will</emphasis> get the parent/child relationships all
	  wrong if you give conflicting names. I do not know how NWN
	  reacts if the items in NWN have conflicting names...</para>

	<para>There used to be a requirement that the Mesh and Object
	  must have the same name, but it has since been removed. At
	  least in theory...</para>
      </sect2>

      <sect2>
	<title>Usual problems with scale and rotation</title>

	<para>The scalings and rotations in Object Mode may or
          may not work. Therefore, it's recommended that you 
          use Edit Mode to apply scalings and rotations to your object.
          Not only is it more versatile but also safer - you do, however,
          lose the benefit of having separate transformation, if this
          little figure of geekspeak is allowed.</para>

	<para>First of all, only uniform scaling (x = y = z) is
	  supported in Object Mode. While Blender supports it non-uniform
          scaling, NWN does not. This is a limitation of
	  the .MDL format. If the Blender <type>Object</type>'s scaling is
          <emphasis>not</emphasis> uniform,
	  an average of the x,y,z scalings will be used. This feature
          is still present mostly to counter possible rounding
          errors, and shouldn't be relied on as a modeling tool.</para>

	<para>Objects may be moved around normally in both Edit Mode and
	  Object Mode.</para>

	<para>Reason why all this is so: Blender has two separate
	  datablocks for each mesh: <type>Object</type> and
	  <type>Mesh</type>. <type>Mesh</type> stores locations of each
	  vertex. <type>Object</type> stores position, rotation and
	  scaling. Basically, the <type>Mesh</type> corresponds to the
	  Trimesh's <emphasis>data</emphasis>, and <type>Object</type>
	  corresponds to the Trimesh's <emphasis>properties</emphasis>,
	  or sometimes the properties of the MDL itself.
	</para>

	<para><type>Object</type>'s location is directly interpreted
	  as the Trimesh "position" property. <type>Object</type>'s
	  rotation could be used as the "orientation" property, but as
	  mentioned, it is not very well documented.</para>

        <para>To find more about this topic, you can refer to what
          Blender manual says about this, or refer to
          <citetitle>Custom Content Guide</citetitle> (in v3.0, this
          topic is discussed on page 20).</para>

        <para>The <citetitle>Custom Content Guide</citetitle> mentions
          some heavy voodoo technobabble on how to counter the evil
          world space transformation problems with
	  ResetXForm and Reset Transform commands. Most of it went
	  over my head. That's 3DMax for you! The thing is far easier
	  explained in this modeling program of ours:
          In Blender 2.30 and later, the relevant
          commands can be found from
          <menuchoice>
             <guimenu>Object</guimenu><guisubmenu>Transform</guisubmenu>
          </menuchoice> menu. The most helpful commands here are 
          <menuchoice>
             <shortcut>
                <keycombo><keycap>Alt</keycap><keysym>S</keysym></keycombo>
             </shortcut>
             <guimenu>Object</guimenu>
             <guisubmenu>Transform</guisubmenu>
             <guimenuitem>Clear Size</guimenuitem>
          </menuchoice>
          and
          <menuchoice>
             <shortcut>
                <keycombo><keycap>Alt</keycap><keysym>R</keysym></keycombo>
             </shortcut>
             <guimenu>Object</guimenu>
             <guisubmenu>Transform</guisubmenu>
             <guimenuitem>Clear Rotation</guimenuitem>
          </menuchoice>, either of which should be enough to make the object
          look more or less what it should be. You can also try other
          transformation clearing commands if it looks like those might
          help. After that, try to stick
          to Edit Mode transformations until I fix the code that deals
          with stuff in Object Mode, if ever.
        </para>
      </sect2>


      <sect2>
	<title>Fixing complex meshes</title>

	<para>Exporter can handle triangle and quad faces.
	  To process faces with more than 4 vertices, you need to
          break it down. One technique is to select the face's vertexes
          in Edit Mode and hit
	  <keycombo><keycap>Shift</keycap><keysym>F</keysym></keycombo> to
	  triangle-fill the face.
	</para>
      </sect2>


      <sect2>
	<title>'ware of the sides! The nasty Normals!</title>

	<para>It should be noted that NeverBlender exports only single face
          side, and will not do double-sided faces. This is probably
          a feature, as doing double-sided faces properly would imply
          producing two faces instead of one - NWN only does single-sided
          faces. If you export a mesh,
          and note only a couple of the faces
          can be seen, try looking from the other side - only the front
          side of the face can be seen.
	</para>

        <para>A good way to manage your normals is to keep Draw
	  Normals set in the Mesh Tools 1 panel in EditButtons. If the
	  normals point the wrong way, you can use Flip Normals in the
	  Mesh Tools to flip the selected face's normals.
        </para>
      </sect2>

    </sect1>

    <sect1>
      <title>The NWN-specific properties</title>

      <para>To specify NWN-specific properties of the mesh, and to
        control the general behavior of NeverBlender as well,
        you need to create a new
        <type>Text</type> called <filename>nwnprops</filename>.
      </para>

      <para>This <type>Text</type> will hold all NWN-related
        properties of the objects. The format is rather simple. All
        empty lines and lines beginning with <literal>#</literal>
        are ignored. The format for all properties is this:
      </para>

      <informalexample>
        <para>
          <replaceable>objectname</replaceable>.<property>property</property>=<replaceable>value</replaceable>
        </para>
      </informalexample>

      <para>This consists of an object name, dot, name of an
        property of the object, equals sign, and the value.</para>

      <para>Object properties naturally correspond to
      <type>Mesh</type>es with same object name.  There are
      properties that affect animations, and names of these "objects"
      are in form
      <classname>ANIM:</classname><replaceable>name</replaceable>.
      There are also some objects that affect the generated model
      file as a whole, instead of any individual object. These are
      all properties of "object" <classname>SCENE</classname>.
      </para>

      <sect2>
        <title>Possible NWN properties</title>

	<para>Here are all properties that are recognized at the
	  moment. You are strongly recommended to at least provide the
	  base object name. Alternates are separated with | symbols.</para>

	<warning>
	  <para>Do note that animation properties are not actually
	    supported by the exporter, simply because there is no
	    code yet. This is just here in anticipation of the implementation,
	    for specification purposes only. <emphasis>Since there is no
	      implementation, the animation properties are subject to
	      change.</emphasis> They already have a couple of times...</para>
	</warning>

	<variablelist>
	  <title>Possible NWN properties</title>

	  <para>
	    <emphasis>Warning:</emphasis>
	    The properties relevant to the animations are only here 
	    in form of a sketch. They may or may not be exactly that
	    in the final form. Either way, there is no code to support
	    this.
	  </para>

	  <varlistentry>
	    <term><classname>SCENE</classname>.<property>baseobjectname</property>=<replaceable>objectname</replaceable></term>
	    <listitem><para>
		The "base object name" of the scene. Its meaning is
		twofold: First of all, it specifies the name of the
		<type>Empty</type> that you have parented the
		<type>Mesh</type>es to, and it is also used as the
		name of the object itself, and also used as the file
		name. If unspecified, well, I can't remember what
		happens. Probably it uses the selected object and
		coughs itself to death. Or maybe it starts a chain
		reaction that destroys the universe. It has been a
		long time since I tried.
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><classname>SCENE</classname>.<property>classification</property>=<replaceable>Character|Tile|Effects|Item</replaceable></term>
	    <listitem><para>
		The "classification" of the item. If not specified, it
		will be "Item", which is probably what you want at the
		moment.
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><classname>SCENE</classname>.<property>supermodel</property>=<replaceable>modelname</replaceable></term>
	    <listitem><para>
		The super model. The name of the model whence this
		model will inherit its animations and
		properties. Useful, in theory, for all those
		creatures. I think. I have never tried this option.
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><classname>SCENE</classname>.<property>pwkobjectname</property>=<replaceable>objectname</replaceable></term>
	    <listitem><para>
		The object that shall be used to create the PWK. We
		will tell more about this later.
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><classname>SCENE</classname>.<property>ignoreanimations</property>=<replaceable>animation,...</replaceable></term>
	    <listitem><para>
	        Comma-separated list of <type>Action</type>s that will not
	        be rendered into MDL animations.
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><classname>FILES</classname>.<property>outputdirectory</property>=<replaceable>directory</replaceable></term>
	    <listitem><para>
		This is the directory the resulting NWN model files
		etcetera will be written. If not specified,
		everything will go to the current working directory.
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><classname>FILES</classname>.<property>log</property>=<replaceable>file</replaceable></term>
	    <listitem><para>
		If specified, the NeverBlender console log will also
		be written to the specified file.
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><replaceable>objectname</replaceable>.<property>texture</property>=<replaceable>texturename</replaceable></term>
	    <listitem><para>
		The texture the object uses, without the
		<filename>.dds</filename> or <filename>.tga</filename>
		filename extensions. If specified, the exporter will
		take the UV texture coordinates and export them
		too. Otherwise the object will be single-colored
		(there's no way to control the color at the moment,
		though, you need to edit the file).
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><replaceable>objectname</replaceable>.<property>tilefade</property>=<replaceable>None|Fade|HBlock|VBlock</replaceable></term>
	    <listitem><para>
		The tile fade property (whether or not the thing will
		disappear when your vision is obstructed by the
		object). None is the default. Fade is probably what
		you want for tall objects. I do not know what the
		other things do.
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><replaceable>objectname</replaceable>.<property>renamedto</property>=<replaceable>newname</replaceable></term>
	    <listitem>
	      <para>
		So, you want to use Blender object names like
		"HoeofDestruction_Head" instead of highly
		uninformative "wplss_t_051". Sure. With this property,
		you can. This property will rename the object in the
		resulting file.		  
		(Unimplemented!)
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><classname>ANIM:</classname><replaceable>animname</replaceable>.<property>keyingmode</property>=<replaceable>Constant|IpoKeys</replaceable></term>
	    <listitem><para>
	        Specifies the algorithm with which the keyframes are generated
                for the .mdl.
                </para>
                <itemizedlist>
                <listitem><para>
                    "Constant" mode will generate keyframes based on
                    ipos on constant intervals.
                </para></listitem>
                <listitem><para>
                    "IpoKeys" will generate keyframes only on places
                    where they exist on ipocurves. <emphasis>This mode is
                    unimplemented!</emphasis>
                </para></listitem>
                </itemizedlist>
                <para>
                The default mode is "constant". While "ipokeys" may be
                more conservative, it will usually be less accurate,
                because the "slopes" of IPOs are not saved, which may
                be a little bit less interesting...
		(Unimplemented!)
                </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><classname>ANIM:</classname><replaceable>animname</replaceable>.<property>constantkeyinterval</property>=<replaceable>5</replaceable></term>
	    <listitem><para>
               In "Constant" keying mode, defines the interval between
               keyframes in frames. Default is 5 frames.
		(Unimplemented!)
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><classname>ANIM:</classname><replaceable>animname</replaceable>.<property>framerate</property>=<replaceable>25</replaceable></term>
	    <listitem><para>
               Per-animation framerate setting. Default 25
               frames/second. (It <emphasis>would</emphasis> default
               to whatever's set in RenderButtons, but it beats me on
               how to read that value from Python...)
		(Unimplemented!)
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><classname>ANIM:</classname><replaceable>animname</replaceable>.<property>renamedto</property>=<replaceable>newname</replaceable></term>
	    <listitem><para>

	       Use this to rename an animation to whatever you want.
	       this is handy if you want to use your preferred naming
	       of animations and find NWN's ideas ludicruous. Like if
	       you prefer "peek_left" instead of whatever it's really
	       called internally by NWN (too lazy to check and I don't
	       have modelling experience, so nyah.)

		(Unimplemented!)
	      </para>
	    </listitem>
	  </varlistentry>

	</variablelist>

      </sect2>

    </sect1>

    <sect1>
      <title>Supermodels</title>

      <para>Supermodels are supported.</para>

      <para>[FIXME: I'll explain later what that actually means.]</para>

    </sect1>


    <sect1>
      <title>Placeable walkmesh (PWK)</title>

      <para>If you are creating a placeable object, it's often nice
        to create another mesh object that's at the ground level and
        specifies whether or not you can walk over that object. You
        can create this object easily (a plane, for example), then
        use the <property>pwkobjectname</property> property to point
        to this object. You should <emphasis>not</emphasis> parent
        this object to the <type>Empty</type> - doing so would also make
        it part of the MDL, which in turn would make the object visible
        in the model itself! PWK mesh itself, naturally, is not visible
        in the game.</para>

      <para>I have no idea how this works at the file level. It
        appears to just work the way I described it. If all else
        fails, see if the normals point to right direction.</para>

    </sect1>


    <sect1>
      <title>Animation</title>

      <para>Animations are not yet supported at all, but they will
        be done through <type>Action</type>s with object-linked
        <type>Armature</type>s. More details will come as code
        will be written.</para>

    </sect1>


    <sect1>
      <title>Actual usage</title>

      <para>After you have made the object hierarchy and specified
        the properties, it's time to rock and roll!</para>

      <sect2>
	<title>Running the script from the menu</title>

	<para>This only applies to Blender 2.32 and later, if the
	  script is installed correctly.</para>

	<para>If the installation was successful, the exporter should
	  be around in the
	  <menuchoice>
             <guimenu>File</guimenu><guisubmenu>Export</guisubmenu>
          </menuchoice> menu. Just select
	  <menuchoice>
             <guimenu>File</guimenu><guisubmenu>Export</guisubmenu>
             <guimenuitem>Bioware NWN ASCII MDL</guimenuitem>
          </menuchoice>
	  to export.
	</para>

	<para>Further fine-tuning of the menu options may occurr in
	  the future. Even with the tweaks, rest assured it doesn't
	  take a rocket scientist's skills to run this thing in the future
	  either. =)</para>

      </sect2>

      <sect2>
	<title>Running the script as a Text</title>

	<para>For Blender versions before 2.32, and optionally for the
	  new versions, it's possible to run the script as a
	  Text. This is slightly more inconvenient than running it
	  from the menu.</para>

	<para>First, it's best if you save at this point and work on a
	  scratch copy. You want to work on
	  the object, save your changes, then load the script and
	  export all the way you please, and quit without saving -
	  I've found this method of work best, as the script will not
	  be included in the work file then.</para>

	<para>To export, you may want to make sure the
	  <filename>lib</filename> files are in right place, then flip
	  to the text editor and open the
	  <filename>nwnmdlexport.py</filename> file.</para>

	<para>To run the script, type 
	  <keycombo><keycap>Alt</keycap><keysym>P</keysym></keycombo>.
	</para>

	<para>As the smoke dissipates, there should be messages
	  regarding the success on the console (in Windows version,
	  they appear in Blender's log window). The object will be
	  saved in the <filename>baseobjectname.mdl</filename>
	  file. If you used a PWK object, it will be written to
	  <filename>baseobjectname.pwk</filename>.
	</para>

      </sect2>

      <sect2>
	<title>And remember...</title>

	<para>If it blows up, just remember, this is beta. Please
	  refer to Blender's documentation, check if your Python path
	  is right, and do the chicken voodoo dance if things just
	  won't work. This is beta.</para>
      </sect2>

    </sect1>
    
  </chapter>

  <!-- ================================================================ -->
  <chapter>
    <title>Complementary scripts</title>

    <para>Or, "Two great scripts that taste great together." What
      other scripts are out there that could make scripting easy and
      nice?</para>

    <sect1>
      <title>Knife</title>

      <para>The <ulink url="http://www.selleri.org/Blender/">Knife
	  script</ulink> or something similar might be useful when
	doing tile slicing · la Tile Slicer. The trick would be then
	to generate the meshes along which the tiles would be
	sliced... this probably calls for some further scripting.
      </para>
    </sect1>


  </chapter>

  <!-- ================================================================ -->
  <chapter>
    <title>Present and Future Directions: The To-Do List</title>

    <sect1>
      <title>Things that absolutely have to work in 1.0</title>

      <para>Here is a list of things that should definitely work in
	the 1.0 release.</para>

      <itemizedlist>
	<listitem>
	  <para>There absolutely needs to be some kind of support for
	    animations. The action-based animation system is the way to
	    do this thing. The animation support is relatively simple
	    to code, but damn it, I don't have enough time. I keep
	    wasting my time.</para>
	</listitem>
	<listitem>
	  <para>Possibly support for NWN emitters that is
	    manipulated through Blender's particle effect
	    system. (Having this feature would be unquestionably leet,
	    because - well - is there proper support for this in
	    gmax? Just hearsay. I have no real information.)</para>
	</listitem>
      </itemizedlist>

    </sect1>

    <sect1>
      <title>Things that are neat to have in future</title>

      <itemizedlist>
	<listitem>
	  <para>Now that there's a script menu in Blender, and
	    other neat GUI tricks, it would be highly neat to have an
	    app that would act as a GUI to all these NWN-specific
	    settings. Hmm, is it possible to implement a Buttons panel
	    (like the Blender WhateverButtons panels) in Python? That
	    would be leet.</para>
	</listitem>

	<listitem>
	  <para>Rotation and scaling is sometimes weird, even with
	    the uniform object scaling implemented. Likewise,
	    rotations sometimes look pretty strange. These bugs need
	    to be checked by someone with proper insight.</para>
	</listitem>

	<listitem>
	  <para>There should be better support for all those esoteric
	    NWN object and trimesh properties (like the dreaded
	    danglymesh property that makes... you know, Aribeth what
	    she is, and all that).</para>
	</listitem>

	<listitem>
	  <para>Revision of the console logging. Perhaps there should
	    be a static class that would handle message output - 
	    store log in file in various formats, etc etc. The default
	    log format should also be thought of: What do all of those
	    asterisks mean in the output, anyway?</para>
	</listitem>

	<listitem>
	  <para>Cleaning up and modularization of the code is going
	    very well. Now if only it would go even further...
	    Bleah. Everyone wants clean and modular code. Let's not
	    talk more about this, OK? Maybe it will clean and
	    modularize itself.</para>
	</listitem>

      </itemizedlist>

    </sect1>

  </chapter>


  <!-- ================================================================ -->
  <colophon>
    <title>Some ending words</title>

    <para>Some people I'd like to thank:</para>

    <itemizedlist>
      <listitem>
	<para>Bioware
	  folks for the amazing game and their general caring,
	  of course!
	</para>
      </listitem>

      <listitem>
	<para>
	  <personname><firstname>Ton</firstname>
	    <surname>Roosendaal</surname></personname>
	  for the greatest modelling program in existence =)
	</para>
      </listitem>

      <listitem>
	<para>
	  <personname><firstname>Eligio</firstname>
	    <surname>Sacateca</surname></personname>
	  for the <citetitle>Custom Content Guide</citetitle>
	</para>
      </listitem>

      <listitem>
	<para>
	  <personname><firstname>Anthony</firstname>
	    <surname>D'Agostino</surname></personname>
	   for the <ulink
url="http://ourworld.compuserve.com/homepages/scorpius/blender_suites.htm">
	    Blender Import-Export Suite</ulink> that demystified
	    a couple of things about Blender API...
	</para>
      </listitem>

      <listitem>
	<para>
	  <personname><firstname>Solias</firstname></personname>
	  of Worlds of Neverwinter for the
	  <ulink url="http://www.wnwn.net/mdl/">
	    NWN model format documentation</ulink>
	</para>
      </listitem>

      <listitem>
	<para>
	  <personname><firstname>Wayland</firstname></personname>,
	  for the gmax mdl script (even when I don't really hack the
	  maxscript syntax...)
	</para>
      </listitem>

      <listitem>
	<para>
	  <personname><firstname>Yann</firstname>
	    <surname>Vernier</surname></personname>
	  for slipping the importer under my door when I had a
	  headache after thinking of how to write that one (well, not
	  really, but the gesture was very syrprising anyway).
	</para>
      </listitem>


    </itemizedlist>

    <para>Also, I'd like to wave my "You were not really helping"
      picket sign toward:</para>

    <itemizedlist>
      <listitem>
	<para>
	  <personname><firstname>Guido</firstname></personname>
	  for the awful, frustrating, can't-find-a-damn-thing,
	  my-eyes-truly-do-bleed format of Python docs...
	</para>
      </listitem>
      <listitem>
	<para>
	  ...and
	  <personname><firstname>Ton</firstname></personname>
	  for picking Python as the Blender scripting language.
	  (This makes him a high-ranked nominee of Geniuses Can Make
	  Mistakes Award.)
	</para>
      </listitem>
    </itemizedlist>

    <para>(No, I don't hate these people. Just that they didn't
      particularly help, that's all. =)</para>

    
    <sect1>
      <title>Finding the Program and Contacting Author</title>

      <para>My home page is at
<ulink
	  url="http://www.iki.fi/wwwwolf/">http://www.iki.fi/wwwwolf/</ulink>.
	You may also visit my
	<ulink url="http://www.iki.fi/wwwwolf/games/nwn/">NWN
	  page</ulink>, and you are cordially invited to
	<ulink url="http://www.iki.fi/wwwwolf/games/nwn/gametools/neverblender/">NeverBlender's home page.</ulink>
      </para>

      <para>I may be reached via E-mail at
	<ulink url="mailto:wwwwolf@iki.fi">wwwwolf@iki.fi</ulink>.
      </para>

      <para>The importer was written by
	<personname><firstname>Yann</firstname>
	  <surname>Vernier</surname></personname>
	(<ulink url="mailto:yann@algonet.se">yann@algonet.se</ulink>).
      </para>

    </sect1>


  </colophon>



</book>

<!--
  Made with the glorious XEmacs.

  Local variables:
  mode:xml
  End:
-->
